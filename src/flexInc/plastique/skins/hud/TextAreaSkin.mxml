<?xml version="1.0" encoding="utf-8"?>
<!--
FlexInc. 2011
http://www.loziosecchi.it/flex_inc
http://flashden.net/user/loziosecchi
http://twitter.com//loziosecchi
-->

<!--- The default skin class for Plastique TextArea component.  

     @see spark.components.TextArea
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
    alpha.disabledStates="0.5" blendMode="normal"
	focusIn="onFocusIn();" focusOut="onFocusOut();">

    <fx:Metadata>
	    <![CDATA[ 
	        /** 
	         * @copy spark.skins.spark.ApplicationSkin#hostComponent
	         */
	        [HostComponent("spark.components.TextArea")]
	    ]]>
    </fx:Metadata> 
    
    <fx:Script fb:purpose="styling">
        <![CDATA[
	        import mx.core.FlexVersion;
	
	        private var lineBreakChanged:Boolean;
	        private var paddingChanged:Boolean;
	        private var verticalAlignChanged:Boolean;
	                
	        /**
	         *  @private
	         */
	        override protected function commitProperties():void
	        {
	            super.commitProperties();
	            
	            if (lineBreakChanged)
	            {
	                updateStringStyle("lineBreak");
	                lineBreakChanged = false;
	            }
	            if (paddingChanged)
	            {
	                updatePadding();
	                paddingChanged = false;
	            }
	            if (verticalAlignChanged)
	            {
	                updateStringStyle("verticalAlign");
	                verticalAlignChanged = false;
	            }
	        }
	        
	        /**
	         *  @private
	         */
	        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
	        {
	            if (getStyle("borderVisible") == true)
	            {
	                background.left = background.top = background.right = 1;
					background.bottom = 2;
	                textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 1;
	                if (promptDisplay)
	                {
	                    promptDisplay.setLayoutBoundsSize(unscaledWidth - 2, unscaledHeight - 2);
	                    promptDisplay.setLayoutBoundsPosition(1, 1);
	                }
	            }
	            else
	            {
	                background.left = background.top = background.right = 0;
					background.bottom = 1;
	                if (promptDisplay)
	                {
	                    promptDisplay.setLayoutBoundsSize(unscaledWidth - 1, unscaledHeight - 1);
	                    promptDisplay.setLayoutBoundsPosition(1, 1);
	                }
	            }
	            
	            super.updateDisplayList(unscaledWidth, unscaledHeight);
	        }
	        
	        /**
	         *  @private
	         */
	        private function updatePadding():void
	        {
	            if (!textDisplay)
	                return;
	            
	            // Push padding styles into the textDisplay
	            var padding:Number;
	            
	            padding = getStyle("paddingLeft");
	            if (textDisplay.getStyle("paddingLeft") != padding)
	                textDisplay.setStyle("paddingLeft", padding);
	            
	            padding = getStyle("paddingTop");
	            if (textDisplay.getStyle("paddingTop") != padding)
	                textDisplay.setStyle("paddingTop", padding);
	            
	            padding = getStyle("paddingRight");
	            if (textDisplay.getStyle("paddingRight") != padding)
	                textDisplay.setStyle("paddingRight", padding);
	            
	            padding = getStyle("paddingBottom");
	            if (textDisplay.getStyle("paddingBottom") != padding)
	                textDisplay.setStyle("paddingBottom", padding);
	
	            if (!promptDisplay)
	                return;
	            
	            padding = getStyle("paddingLeft");
	            if (promptDisplay.getStyle("paddingLeft") != padding)
	                promptDisplay.setStyle("paddingLeft", padding);
	            
	            padding = getStyle("paddingTop");
	            if (promptDisplay.getStyle("paddingTop") != padding)
	                promptDisplay.setStyle("paddingTop", padding);
	            
	            padding = getStyle("paddingRight");
	            if (promptDisplay.getStyle("paddingRight") != padding)
	                promptDisplay.setStyle("paddingRight", padding);
	            
	            padding = getStyle("paddingBottom");
	            if (promptDisplay.getStyle("paddingBottom") != padding)
	                promptDisplay.setStyle("paddingBottom", padding);
	        }
	        
	        /**
	         *  @private
	         */
	        private function updateStringStyle(styleName:String):void
	        {
	            if (!textDisplay)
	                return;
	            
	            // Push style into the textDisplay
	            var style:String;
	            
	            style = getStyle(styleName);
	            if (textDisplay.getStyle(styleName) != style)
	                textDisplay.setStyle(styleName, style);
	
	            if (!promptDisplay)
	                return;
	            
	            // Push style into the promptDisplay
	            style = getStyle(styleName);
	            if (promptDisplay.getStyle(styleName) != style)
	                promptDisplay.setStyle(styleName, style);
	        }
	        
	        /**
	         *  @private
	         */
	        override public function styleChanged(styleProp:String):void
	        {
	            var allStyles:Boolean = !styleProp || styleProp == "styleName";
	
	            super.styleChanged(styleProp);
	            
	            if (allStyles || styleProp.indexOf("lineBreak") == 0)
	            {
	                lineBreakChanged = true;
	                invalidateProperties();
	            }
	            if (allStyles || styleProp.indexOf("padding") == 0)
	            {
	                paddingChanged = true;
	                invalidateProperties();
	            }
	            if (allStyles || styleProp.indexOf("verticalAlign") == 0)
	            {
	                verticalAlignChanged = true;
	                invalidateProperties();
	            }
	        }
        ]]>
    </fx:Script>
    
    <fx:Script>
        <![CDATA[
	        /** 
	         * @private 
	         */     
			private static const focusExclusions:Array = ["textDisplay", "highlight"];
	
	        /**
	         *  @private
	         */
	        override public function get focusSkinExclusions():Array { return focusExclusions;};

			public function onFocusIn():void
			{
				highlight.visible = false;
			}
			
			public function onFocusOut():void
			{
				highlight.visible = true;
			}
		]]>
    </fx:Script>
    
    <s:states>
        <s:State name="normal"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="normalWithPrompt"/>
        <s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
    </s:states>
    
	<!-- layer 1: highlight -->
	<!--- @private -->
	<s:Rect id="highlight" left="0" top="0" right="0" bottom="0" radiusX="2" >
		<s:fill>
			<s:SolidColor color="0x666666" alpha=".55" />
		</s:fill>
	</s:Rect>
	
	<!-- layer 2: border -->
	<!--- @private -->
	<s:Rect id="border" left="0" top="0" right="0" bottom="1" radiusX="2" >
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x1b1b1b" />
				<s:GradientEntry color="0x444444" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 3: fill -->
	<!--- @private -->
	<s:Rect id="background" left="1" top="1" right="1" bottom="2" radiusX="2" >
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry id="dotFill0" color="0x515151" />
				<s:GradientEntry id="dotFill1" color="0x414141" />
			</s:LinearGradient>
		</s:fill>
		<s:filters>
			<s:DropShadowFilter angle="90" alpha=".55" color="0x000000" blurX="2" blurY="2" distance="1" strength="1" quality="3" inner="true" />
		</s:filters>
	</s:Rect>

    <!--- Defines the scroller that is used to scroll the TextArea control. -->
    <s:Scroller id="scroller" left="0" top="0" right="0" bottom="0" minViewportInset="1" measuredSizeIncludesScrollBars="false" hasFocusableChildren="false">
        <!--- @copy spark.components.supportClasses.SkinnableTextBase#textDisplay -->
        <s:RichEditableText id="textDisplay" heightInLines="10" widthInChars="15" />
    </s:Scroller>
    
    <!--- Defines the Label that is used for prompt text. The includeInLayout property is false so the prompt text does not affect measurement. -->
    <s:Label id="promptDisplay"
                mouseEnabled="false" mouseChildren="false"
                includeIn="normalWithPrompt,disabledWithPrompt" 
                includeInLayout="false"
                />            

</s:SparkSkin>
